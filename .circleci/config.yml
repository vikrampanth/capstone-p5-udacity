version: 2.1

defaultpythonimage: &defaultpythonimage
  docker:
    - image: python:3.7-alpine3.11

orbs:
  aws-cli: circleci/aws-cli@1.3.0

parameters:
  run-id:
    type: string
    default: "${CIRCLE_WORKFLOW_ID:0:7}"
  memstash-token:
    type: string
    default: "c8c16243-3ac7-45ec-9a0a-5ca9ef15261a"

commands:
  aws-cli-setup-python:
    description: Install AWS CLI
    steps:
      - run:
          name: Install AWS command
          when: on_fail
          command: |
            apk add --no-cache python3 py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install awscli

  destroy-environment:
    description: Destroy front-end cloudformation stacks with given a workflow ID
    steps:
      - run:
          name: Destroy frontend and backend environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name frontend-${CIRCLE_WORKFLOW_ID}

jobs:

  build:
    <<: *defaultpythonimage
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13      
      - run:
          name: Install Docker client
          command: apk add docker-cli
      - run:
          name: Build
          command: |
            apk update && apk add bash
            echo "Build Docker Image"
            chmod +x run_docker.sh
            ./run_docker.sh

  test:
    <<: *defaultpythonimage
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13      
      - run:
          name: Install Docker client
          command: apk add docker-cli
      - run:
          name: "Test"
          command: |
            apk update && apk add bash
            apk add --update curl
            chmod +x run_docker.sh
            ./run_docker.sh
            curl localhost:8080
            
  lint:
    <<: *defaultpythonimage
    steps:
      - checkout
      - run:
          name: "Linting"
          command: |
            apk update
            apk add --update make
            make install
            make lint
            sh 'tidy -q -e *.html'

  deploy-infrastructure:
    docker:
      - image: sleavely/node-awscli
    steps:
      - checkout
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=CICD-Udacity-<< pipeline.parameters.run-id >> \
              --stack-name frontend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=CICD-Udacity-back-<< pipeline.parameters.run-id >>" --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - run:
          name: Add back-end ip to Memstash
          command: |
            mkdir /tmp/workspace
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=CICD-Udacity-back-<< pipeline.parameters.run-id >>" \
              --output text > /tmp/workspace/ips.txt
            EC2_IP=$(cat /tmp/workspace/ips.txt)
            echo $EC2_IP
            curl -H "Content-Type: text/plain" -H "token: << pipeline.parameters.memstash-token >>" \
              --request PUT --data $EC2_IP https://api.memstash.io/values/ips
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    <<: *defaultpythonimage
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "8f:30:cf:c2:0d:5c:9d:a4:f7:70:7a:fa:dc:98:e6:cd"
      - attach_workspace:
          at: ~/
      - run:
          name: Update dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook .circleci/ansible/configure-server.yml \
              -i .circleci/ansible/inventory.txt
      - aws-cli-setup-python
      - destroy-environment

  deploy-frontend:
    docker:
      - image: sleavely/node-awscli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt update
      - run:
          name: Deploy frontend objects
          command: |
            ls -la
            aws s3 cp ./index.html s3://udapeople-${CIRCLE_WORKFLOW_ID} 
           # can use sync . to upload all new files
      - destroy-environment

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/      
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
      - run:
          name: Frontend smoke test.
          command: |
            URL="https://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-west-2.amazonaws.com"
            echo $URL          
            if curl -s ${URL} | grep "Welcome"
              then
                echo "if"
                return 0
              else
                echo "else"
                return 0
            fi            
      - run:
          name: Get and store Last Pipeline ID
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name=='WorkflowID'].Value" --no-paginate --output text)
            if [ -z "${OldWorkflowID}" ]
            then
              echo "No old implementation"
            else
              echo "else"
              curl -H "Content-Type: text/plain" -H "token: << pipeline.parameters.memstash-token >>" --request PUT --data ${OldWorkflowID} https://api.memstash.io/values/last_pipeline_${CIRCLE_WORKFLOW_ID}
            fi
            echo ${OldWorkflowID}
      - aws-cli-setup-python
      - destroy-environment

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old pipeline and Remove old stacks and files
          command: |
            export OldWorkflowID=$(curl -H "token: << pipeline.parameters.memstash-token >>" --request GET https://api.memstash.io/values/last_pipeline_${CIRCLE_WORKFLOW_ID} )
            echo ${OldWorkflowID}
            if [ -z "${OldWorkflowID}" ]
              then
                echo "No old Id and empty"
              else
                aws s3 rm --recursive s3://udapeople-${OldWorkflowID}
                aws cloudformation delete-stack --stack-name frontend-${OldWorkflowID}
                aws cloudformation delete-stack --stack-name backend-${OldWorkflowID}
            fi
#           aws s3 rb s3://udapeople-vp-${OldWorkflowID} --force

workflows:
  default:
    jobs:
      - build
      - test:
          requires: [build]
      - lint:
          requires: [build]
      - deploy-infrastructure:
          requires: [test, lint]
          filters:
            branches:
              only: [master-test]          
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - deploy-frontend:
          requires: [configure-infrastructure]
      - smoke-test:
          requires: [deploy-frontend]
      - cleanup:
          requires: [smoke-test]
